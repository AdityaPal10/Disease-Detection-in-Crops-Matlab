def bact():
window.destroy()
window1 = tk.Tk()
window1.title("ADITYA PAL - 16BCE0846")
window1.geometry("500x510")
window1.configure(background="lightgreen")
def exit():
window1.destroy()
rem = "The remedies for Bacterial Spot are:\n\n "
remedies = tk.Label(text=rem, background="lightgreen",
fg="Brown", font=("", 15))
remedies.grid(column=0, row=7, padx=10, pady=10)
rem1 = " Discard or destroy any affected plants. \n Do not compost them. \n Rotate yoour tomato plants yearly to prevent re-infection next year. \n Use copper fungicites"
remedies1 = tk.Label(text=rem1, background="lightgreen",
fg="Black", font=("", 12))
remedies1.grid(column=0, row=8, padx=10, pady=10)
button = tk.Button(text="Exit", command=exit)
button.grid(column=0, row=9, padx=20, pady=20)
window1.mainloop()
def vir():
window.destroy()
window1 = tk.Tk()
window1.title("ADITYA PAL - 16BCE0846")
window1.geometry("650x510")
window1.configure(background="lightgreen")
def exit():
window1.destroy()
rem = "The remedies for Yellow leaf curl virus are: "
remedies = tk.Label(text=rem, background="lightgreen",
fg="Brown", font=("", 15))
remedies.grid(column=0, row=7, padx=10, pady=10)
rem1 = " Monitor the field, handpick diseased plants and bury them. \n Use sticky yellow plastic traps. \n Spray insecticides such as organophosphates, carbametes during the seedliing stage. \n Use copper fungicites"
remedies1 = tk.Label(text=rem1, background="lightgreen",
fg="Black", font=("", 12))
remedies1.grid(column=0, row=8, padx=10, pady=10)
14 | P a g e
button = tk.Button(text="Exit", command=exit)
button.grid(column=0, row=9, padx=20, pady=20)
window1.mainloop()
def latebl():
window.destroy()
window1 = tk.Tk()
window1.title("ADITYA PAL - 16BCE0846")
window1.geometry("520x510")
window1.configure(background="lightgreen")
def exit():
window1.destroy()
rem = "The remedies for Late Blight are: "
remedies = tk.Label(text=rem, background="lightgreen",
fg="Brown", font=("", 15))
remedies.grid(column=0, row=7, padx=10, pady=10)
rem1 = " Monitor the field, remove and destroy infected leaves. \n Treat organically with copper spray. \n Use chemical fungicides,the best of which for tomatoes is chlorothalonil."
remedies1 = tk.Label(text=rem1, background="lightgreen",
fg="Black", font=("", 12))
remedies1.grid(column=0, row=8, padx=10, pady=10)
button = tk.Button(text="Exit", command=exit)
button.grid(column=0, row=9, padx=20, pady=20)
window1.mainloop()
def analysis():
import cv2 # working with, mainly resizing, images
import numpy as np # dealing with arrays
import os # dealing with directories
from random import shuffle # mixing up or currently ordered data that might lead our network astray in training.
from tqdm import \
tqdm # a nice pretty percentage bar for tasks. Thanks to viewer Daniel BA1/4hler for this suggestion
verify_dir = 'testpicture'
IMG_SIZE = 50
LR = 1e-3
MODEL_NAME = 'healthyvsunhealthy-{}-{}.model'.format(LR, '2conv-basic')
def process_verify_data():
verifying_data = []
for img in tqdm(os.listdir(verify_dir)):
path = os.path.join(verify_dir, img)
img_num = img.split('.')[0]
img = cv2.imread(path, cv2.IMREAD_COLOR)
img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
verifying_data.append([np.array(img), img_num])
np.save('verify_data.npy', verifying_data)
return verifying_data
15 | P a g e
verify_data = process_verify_data()
#verify_data = np.load('verify_data.npy')
]
model_out = model.predict([data])[0]
if np.argmax(model_out) == 0:
str_label = 'healthy'
elif np.argmax(model_out) == 1:
str_label = 'bacterial'
elif np.argmax(model_out) == 2:
str_label = 'viral'
elif np.argmax(model_out) == 3:
str_label = 'lateblight'
if str_label =='healthy':
status ="HEALTHY"
else:
status = â€œUNHEALTHY"